using UnityEngine;
using System.Collections;

public class Weights
{
    int[,] PawnBoardWeight = 
    {
        {0,  0,  0,  0,  0,  0,  0, 0,0,0,0,0,0},
       {50,50,50, 50, 50, 50,50, 50, 50, 50,50,50, 50},
        {10, 10,10, 10, 20, 30,30, 30, 20, 10, 10,10, 10},
        {5,  5,5,  5, 10, 25,25,  25, 10, 5,  5, 5,  5},
         {0,0,  0,  0,  0, 20, 20, 20,   0,  0,  0,0,  0},
        {0,0,  0,  0,  0, 20, 20, 20,   0,  0,  0,0,  0},
        {0,0,  0,  0,  0, 20, 20, 20,   0,  0,  0,0,  0},
        {0,0,  0,  0,  0, 20, 20, 20,   0,  0,  0,0,  0},
        {0,0,  0,  0,  0, 20, 20, 20,   0,  0,  0,0,  0},
        {0,0,  0,  0,  0, 20, 20, 20,   0,  0,  0,0,  0},
        {5,5,-5, -5,-10,  0,  0,0,-10, -5,  -5, 5,5},
        {5,5,10, 10, 10,-20,-20,-20, 10, 10,10,  5, 5},
        {0,  0,  0,  0,  0,  0,  0,0,0,0,0,0,  0}
    };

    int[,] PawnMirrorBoardWeight =
    {
        {0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0},
        {5,5, 10, 10, 10,-20,-20,-20, 10, 10, 10, 5, 5},
        {5, 5,-5, -5,-10,  0,0,  0,-10, -5,  -5,5, 5},
        {0,  0,0,  0,  0, 20, 20,20,  0,  0,  0,0,  0},
        {0,  0,0,  0,  0, 20, 20,20,  0,  0,  0,0,  0},
        {0,  0,0,  0,  0, 20, 20,20,  0,  0,  0,0,  0},
        {0,  0,0,  0,  0, 20, 20,20,  0,  0,  0,0,  0},
        {0,  0,0,  0,  0, 20, 20,20,  0,  0,  0,0,  0},
        {0,  0,0,  0,  0, 20, 20,20,  0,  0,  0,0,  0},
        {5,  5,5,  5, 10, 25, 25,25, 10,  5,  5,5,  5},
        {10, 10,10, 10, 20, 30,30, 30, 20, 10, 10,10, 10},
        {50, 50, 50, 50, 50,50, 50, 50, 50, 50, 50, 50, 50},
        {0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0}
    };

    int[,] KnightBoardWeight =
      {
        {-50,-50,-40,-40,-30,-30,-30,-30,-30,-40,-40,-50,-50},
        {-40,-40,-20,-20,  0,  0, 0, 0,  0,-20,-20,-40,-40},
        {-30,  -30,0,  0, 10, 15, 15, 15, 10,  0,0,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30, 5, 5, 10, 15, 15,15, 10, 5, 5,-30,-30},
        {-40,-40,-20,-20,  0,  5, 5, 5,  0,-20,-20,-40,-40},
        {-50,-50,-40,-40,-30,-30,-30,-30,-30,-40,-40,-50,-50}
    };

    int[,] KnightMirrorBoardWeight =
        {
        {-50,-50,-40,-40,-30,-30,-30,-30,-30,-40,-40,-50,-50},
        {-40,-40,-20,-20,  0,  5, 5, 5,  0,-20,-20,-40,-40},
        {-30,-30, 5, 5, 10, 15, 15,15, 10, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,-30,  5, 15, 20, 20,20, 20,   15, 5, 5,-30,-30},
        {-30,  -30,0,  0, 10, 15, 15, 15, 10,  0,0,-30,-30},
        {-40,-40,-20,-20,  0,  0, 0, 0,  0,-20,-20,-40,-40},
        {-50,-50,-40,-40,-30,-30,-30,-30,-30,-40,-40,-50,-50},
    };

    int[,] BishopBoardWeight = 
    {
        {-20,-20,-10,-10,-10,-10,-10,-10,-10,-10,-10,-20,-20},
        {-10,-10,  0,  0,  0,0,  0,  0,  0,  0,  0,-10,-10},
        {-10,-10, 0, 0,  5, 10,10, 10,  5, 0, 0,-10,-10},
        {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
        {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
        {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
         {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
         {-10,-10, 0, 0, 10, 10, 10, 10, 10,  0,0,-10,-10},
         {-10,-10, 0, 0, 10, 10, 10, 10, 10,  0,0,-10,-10},
            {-10,-10, 0, 0, 10, 10, 10, 10, 10,  0,0,-10,-10},
        {-10,-10, 10,10, 10, 10, 10,10, 10, 10,10,-10,-10},
        {-10,-10, 5, 5,  0,  0, 0,  0,  0, 5, 5,-10,-10},
        {-20,-20,-10,-10,-10,-10,-10,-10,-10,-10,-10,-20,-20}
    };

    int[,] BishopMirrowBoardWeight = 
    {
        {-20,-20,-10,-10,-10,-10,-10,-10,-10,-10,-10,-20,-20},
        {-10,-10, 5, 5,  0,  0, 0,  0,  0, 5, 5,-10,-10},
        {-10,-10, 10,10, 10, 10, 10,10, 10, 10,10,-10,-10},
        {-10,-10, 0, 0, 10, 10, 10, 10, 10,  0,0,-10,-10},
        {-10,-10, 0, 0, 10, 10, 10, 10, 10,  0,0,-10,-10},
        {-10,-10, 0, 0, 10, 10, 10, 10, 10,  0,0,-10,-10},
        {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
        {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
        {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
        {-10,-10, 5, 5,  5,  10,10, 10,  5,  5,5,-10,-10},
        {-10,-10, 0, 0,  5, 10,10, 10,  5, 0, 0,-10,-10},
        {-10,-10,  0,  0,  0,0,  0,  0,  0,  0,  0,-10,-10},
        {-20,-20,-10,-10,-10,-10,-10,-10,-10,-10,-10,-20,-20}

    };

    int[,] RookBoardWeight = 
    {
        {0,  0,  0,  0,  0,  0,  0,  0,0,  0,  0,  0,  0},
        {5,5, 10, 10, 10, 10, 10, 10,10, 10, 10, 5, 5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {0,  0,0,  0,  0,  5, 5, 5,  0,  0, 0,  0, 0}
    };

    int[,] RookMirrorBoardWeight = 
    {
        {0,  0,0,  0,  0,  5, 5, 5,  0,  0, 0,  0, 0},
         {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {-5,-5,  0,  0,  0,  0,  0,0,  0,  0,  0, -5,-5},
        {5,5, 10, 10, 10, 10, 10, 10,10, 10, 10, 5, 5},
        {0,  0,  0,  0,  0,  0,  0,  0,0,  0,  0,  0,  0}
    };

    int[,] QueenBoardWeight =
    {
        {-20,-20,-10,-10,-10, -5, -5,-5,-10,-10,-10,-20,-20},
        {-10,-10,  0,  0,  0,  0,  0,0,  0,  0,  0,-10,-10},
        {-10,-10, 0, 0,  5,  5,  5, 5,  5,  0,0,-10,-10},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-10,-10, 0, 0,  5,  0,  0, 0, 5, 0, 0,-10,-10},
        {-20,-20,-10,-10,-10, -5,-5, -5,-10,-10,-10,-20,-20}
    };

    int[,] QueenMirrorBoardWeight = 
    {
        {-20,-20,-10,-10,-10, -5, -5,-5,-10,-10,-10,-20,-20},
        {-10,-10,  0,  0,  0,  0,  0,0,  0,  0,  0,-10,-10},
        {-10,-10, 0, 0,  5,  5,  5, 5,  5,  0,0,-10,-10},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-5,-5, 0, 0,  5,  5, 5, 5,  5,  0,0, -5,-5},
        {-10,-10, 0, 0,  5,  0,  0, 0, 5, 0, 0,-10,-10},
        {-20,-20,-10,-10,-10, -5,-5, -5,-10,-10,-10,-20,-20}
    };

    int[,] KingBoardWeight =
    {
        {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 },
        {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 },
         {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 },
         {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 },
         {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
         {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
         {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
         {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
         {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
         {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
         {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {20,20,20, 20,  0,  0, 0, 0,  0, 20,20,20,20},
        {20,20,20, 20,  0,  0, 0, 0,  0, 20,20,20,20}
    };

    int[,] KingMirrorBoardWeight = 
    {
        {20,20,20, 20,  0,  0, 0, 0,  0, 20,20,20,20},
        {20,20,20, 20,  0,  0, 0, 0,  0, 20,20,20,20},
        {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {-20,-20,-20,-30,-30,-40,-40,-40,-30,-30,-20,-20,-20},
        {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 },
        {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 },
        {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 },
        {-30,-30,-30,-40,-40,-50,-50,-50,-40,-40,-30,-30,-30 }
    };

    int[,] KingEndBoardWeight = 
    {
        {-50,-50,-40,-40,-30,-20,-20,-20,-30,-40,-40,-50,-50},
        {-30,-30,-20,-20,-10,  0,0,  0,-10,-20,-20,-30,-30},
        {-30,-30,-10,-10, 20, 30, 30,30, 20,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 20, 30, 30,30, 20,-10,-10,-30,-30},
        {-30,-30,-30,-30,  0,  0, 0, 0,  0,-30,-30,-30,-30},
        {-50,-50,-30,-30,-30,-30,-30,-30,-30,-30,-30,-50,-50}
    };

    int[,] KingEndMirrorBoardWeight = 
    {
        {-50,-50,-30,-30,-30,-30,-30,-30,-30,-30,-30,-50,-50},
        {-30,-30,-30,-30,  0,  0, 0, 0,  0,-30,-30,-30,-30},
        {-30,-30,-10,-10, 20, 30, 30,30, 20,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 30, 40,40, 40, 30,-10,-10,-30,-30},
        {-30,-30,-10,-10, 20, 30, 30,30, 20,-10,-10,-30,-30},
        {-30,-30,-20,-20,-10,  0,0,  0,-10,-20,-20,-30,-30},
        {-50,-50,-40,-40,-30,-20,-20,-20,-30,-40,-40,-50,-50},
    };

    public int GetBoardWeight(BasePiece.pieceType type, Cell position, Color color)
    {
        switch (type)
        {
            case BasePiece.pieceType.PAWN:
                if (color == Color.white)
                    return PawnBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
                else
                    return PawnMirrorBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
            case BasePiece.pieceType.ROOK:
                if (color == Color.white)
                    return RookBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
                else
                    return RookMirrorBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
            case BasePiece.pieceType.KNIGHT:
                if (color == Color.white)
                    return KnightBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
                else
                    return KnightMirrorBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
            case BasePiece.pieceType.BISHOP:
                if (color == Color.white)
                    return BishopBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
                else
                    return BishopMirrowBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
            case BasePiece.pieceType.QUEEN:
                if (color == Color.white)
                    return QueenBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
                else
                    return QueenMirrorBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
            case BasePiece.pieceType.KING:
                if (color == Color.white)
                    return KingBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
                else
                    return KingMirrorBoardWeight[(int)position.mBoardPosition.x, (int)position.mBoardPosition.y];
            default:
                return -1;
        }
    }

    public int GetPieceWeight(BasePiece.pieceType type)
    {
        switch (type)
        {
            case BasePiece.pieceType.PAWN:
                return 10;
            case BasePiece.pieceType.ROOK:
                return 50;
            case BasePiece.pieceType.KNIGHT:
                return 30;
            case BasePiece.pieceType.BISHOP:
                return 30;
            case BasePiece.pieceType.QUEEN:
                return 900;
            case BasePiece.pieceType.KING:
                return 1000000;
            default:
                return -1;
        }
    }
}
